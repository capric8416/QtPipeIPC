// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR CommonHead::CommonHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_size_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.extend_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonHeadDefaultTypeInternal() {}
  union {
    CommonHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonHeadDefaultTypeInternal _CommonHead_default_instance_;
PROTOBUF_CONSTEXPR AudioHead::AudioHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.next_size_)*/uint64_t{0u}
  , /*decltype(_impl_.codec_)*/0} {}
struct AudioHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioHeadDefaultTypeInternal() {}
  union {
    AudioHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioHeadDefaultTypeInternal _AudioHead_default_instance_;
PROTOBUF_CONSTEXPR VideoHead::VideoHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.next_size_)*/uint64_t{0u}
  , /*decltype(_impl_.partial_)*/false
  , /*decltype(_impl_.codec_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.dts_)*/uint64_t{0u}
  , /*decltype(_impl_.pts_)*/uint64_t{0u}} {}
struct VideoHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoHeadDefaultTypeInternal() {}
  union {
    VideoHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoHeadDefaultTypeInternal _VideoHead_default_instance_;
PROTOBUF_CONSTEXPR EventHead::EventHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_size_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventHeadDefaultTypeInternal() {}
  union {
    EventHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventHeadDefaultTypeInternal _EventHead_default_instance_;
}  // namespace message
static ::_pb::Metadata file_level_metadata_message_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_message_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::CommonHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::CommonHead, _impl_.next_size_),
  PROTOBUF_FIELD_OFFSET(::message::CommonHead, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::CommonHead, _impl_.extend_),
  PROTOBUF_FIELD_OFFSET(::message::AudioHead, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::AudioHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::AudioHead, _impl_.next_size_),
  PROTOBUF_FIELD_OFFSET(::message::AudioHead, _impl_.codec_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.next_size_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.partial_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.codec_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.dts_),
  PROTOBUF_FIELD_OFFSET(::message::VideoHead, _impl_.pts_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::EventHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::EventHead, _impl_.next_size_),
  PROTOBUF_FIELD_OFFSET(::message::EventHead, _impl_.type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message::CommonHead)},
  { 9, 17, -1, sizeof(::message::AudioHead)},
  { 19, 34, -1, sizeof(::message::VideoHead)},
  { 43, -1, -1, sizeof(::message::EventHead)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message::_CommonHead_default_instance_._instance,
  &::message::_AudioHead_default_instance_._instance,
  &::message::_VideoHead_default_instance_._instance,
  &::message::_EventHead_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\007message\"\220\001\n\nCommonHead\022"
  "\021\n\tnext_size\030\001 \001(\004\022&\n\004type\030\002 \001(\0162\030.messa"
  "ge.CommonHead.Type\022\016\n\006extend\030\003 \001(\010\"7\n\004Ty"
  "pe\022\016\n\nNoMansLand\020\000\022\t\n\005Audio\020\001\022\t\n\005Video\020\002"
  "\022\t\n\005Event\020\003\"{\n\tAudioHead\022\021\n\tnext_size\030\001 "
  "\001(\004\022,\n\005codec\030\002 \001(\0162\030.message.AudioHead.C"
  "odecH\000\210\001\001\"#\n\005Codec\022\016\n\nNoMansLand\020\000\022\n\n\006G7"
  "23_1\020\001B\010\n\006_codec\"\264\003\n\tVideoHead\022\021\n\tnext_s"
  "ize\030\001 \001(\004\022\017\n\007partial\030\002 \001(\010\022,\n\005codec\030\003 \001("
  "\0162\030.message.VideoHead.CodecH\000\210\001\001\022/\n\004type"
  "\030\004 \001(\0162\034.message.VideoHead.FrameTypeH\001\210\001"
  "\001\022\025\n\010sequence\030\005 \001(\rH\002\210\001\001\022\022\n\005width\030\006 \001(\rH"
  "\003\210\001\001\022\023\n\006height\030\007 \001(\rH\004\210\001\001\022\020\n\003dts\030\010 \001(\004H\005"
  "\210\001\001\022\020\n\003pts\030\t \001(\004H\006\210\001\001\"N\n\tFrameType\022\016\n\nNo"
  "MansLand\020\000\022\016\n\nIntraCoded\020\001\022\016\n\nPredicated"
  "\020\002\022\021\n\rBiDirectional\020\003\"+\n\005Codec\022\017\n\013NoMans"
  "Land1\020\000\022\007\n\003AVC\020\001\022\010\n\004HEVC\020\002B\010\n\006_codecB\007\n\005"
  "_typeB\013\n\t_sequenceB\010\n\006_widthB\t\n\007_heightB"
  "\006\n\004_dtsB\006\n\004_pts\"\315\002\n\tEventHead\022\021\n\tnext_si"
  "ze\030\001 \001(\004\022%\n\004type\030\002 \001(\0162\027.message.EventHe"
  "ad.Type\"\205\002\n\004Type\022\016\n\nNoMansLand\020\000\022\t\n\005Clos"
  "e\020\001\022\027\n\023SetBrightnessFilter\020\002\022\025\n\021SetContr"
  "astFilter\020\003\022\027\n\023SetSaturationFilter\020\004\022\022\n\016"
  "SetGammaFilter\020\005\022\014\n\010SetSpeed\020\006\022\020\n\014TakeSn"
  "apshot\020\007\022\t\n\005Pause\020\010\022\n\n\006Resume\020\t\022\017\n\013StepF"
  "orward\020\n\022\020\n\014StepBackward\020\013\022\025\n\021StartRecor"
  "dStream\020\014\022\024\n\020StopRecordStream\020\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 1079, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonHead_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool CommonHead_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommonHead_Type CommonHead::NoMansLand;
constexpr CommonHead_Type CommonHead::Audio;
constexpr CommonHead_Type CommonHead::Video;
constexpr CommonHead_Type CommonHead::Event;
constexpr CommonHead_Type CommonHead::Type_MIN;
constexpr CommonHead_Type CommonHead::Type_MAX;
constexpr int CommonHead::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioHead_Codec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool AudioHead_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AudioHead_Codec AudioHead::NoMansLand;
constexpr AudioHead_Codec AudioHead::G723_1;
constexpr AudioHead_Codec AudioHead::Codec_MIN;
constexpr AudioHead_Codec AudioHead::Codec_MAX;
constexpr int AudioHead::Codec_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoHead_FrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool VideoHead_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VideoHead_FrameType VideoHead::NoMansLand;
constexpr VideoHead_FrameType VideoHead::IntraCoded;
constexpr VideoHead_FrameType VideoHead::Predicated;
constexpr VideoHead_FrameType VideoHead::BiDirectional;
constexpr VideoHead_FrameType VideoHead::FrameType_MIN;
constexpr VideoHead_FrameType VideoHead::FrameType_MAX;
constexpr int VideoHead::FrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoHead_Codec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[3];
}
bool VideoHead_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VideoHead_Codec VideoHead::NoMansLand1;
constexpr VideoHead_Codec VideoHead::AVC;
constexpr VideoHead_Codec VideoHead::HEVC;
constexpr VideoHead_Codec VideoHead::Codec_MIN;
constexpr VideoHead_Codec VideoHead::Codec_MAX;
constexpr int VideoHead::Codec_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventHead_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[4];
}
bool EventHead_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EventHead_Type EventHead::NoMansLand;
constexpr EventHead_Type EventHead::Close;
constexpr EventHead_Type EventHead::SetBrightnessFilter;
constexpr EventHead_Type EventHead::SetContrastFilter;
constexpr EventHead_Type EventHead::SetSaturationFilter;
constexpr EventHead_Type EventHead::SetGammaFilter;
constexpr EventHead_Type EventHead::SetSpeed;
constexpr EventHead_Type EventHead::TakeSnapshot;
constexpr EventHead_Type EventHead::Pause;
constexpr EventHead_Type EventHead::Resume;
constexpr EventHead_Type EventHead::StepForward;
constexpr EventHead_Type EventHead::StepBackward;
constexpr EventHead_Type EventHead::StartRecordStream;
constexpr EventHead_Type EventHead::StopRecordStream;
constexpr EventHead_Type EventHead::Type_MIN;
constexpr EventHead_Type EventHead::Type_MAX;
constexpr int EventHead::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CommonHead::_Internal {
 public:
};

CommonHead::CommonHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.CommonHead)
}
CommonHead::CommonHead(const CommonHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_size_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.extend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_size_, &from._impl_.next_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extend_) -
    reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.extend_));
  // @@protoc_insertion_point(copy_constructor:message.CommonHead)
}

inline void CommonHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_size_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.extend_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonHead::~CommonHead() {
  // @@protoc_insertion_point(destructor:message.CommonHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonHead::Clear() {
// @@protoc_insertion_point(message_clear_start:message.CommonHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.next_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.extend_) -
      reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.extend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.CommonHead.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::CommonHead_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // bool extend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.extend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.CommonHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_next_size(), target);
  }

  // .message.CommonHead.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bool extend = 3;
  if (this->_internal_extend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_extend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.CommonHead)
  return target;
}

size_t CommonHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.CommonHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_size());
  }

  // .message.CommonHead.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool extend = 3;
  if (this->_internal_extend() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonHead::GetClassData() const { return &_class_data_; }


void CommonHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonHead*>(&to_msg);
  auto& from = static_cast<const CommonHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.CommonHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_size() != 0) {
    _this->_internal_set_next_size(from._internal_next_size());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_extend() != 0) {
    _this->_internal_set_extend(from._internal_extend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonHead::CopyFrom(const CommonHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.CommonHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonHead::IsInitialized() const {
  return true;
}

void CommonHead::InternalSwap(CommonHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonHead, _impl_.extend_)
      + sizeof(CommonHead::_impl_.extend_)
      - PROTOBUF_FIELD_OFFSET(CommonHead, _impl_.next_size_)>(
          reinterpret_cast<char*>(&_impl_.next_size_),
          reinterpret_cast<char*>(&other->_impl_.next_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class AudioHead::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioHead>()._impl_._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AudioHead::AudioHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.AudioHead)
}
AudioHead::AudioHead(const AudioHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_size_){}
    , decltype(_impl_.codec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_size_, &from._impl_.next_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.codec_) -
    reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.codec_));
  // @@protoc_insertion_point(copy_constructor:message.AudioHead)
}

inline void AudioHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_size_){uint64_t{0u}}
    , decltype(_impl_.codec_){0}
  };
}

AudioHead::~AudioHead() {
  // @@protoc_insertion_point(destructor:message.AudioHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioHead::Clear() {
// @@protoc_insertion_point(message_clear_start:message.AudioHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_size_ = uint64_t{0u};
  _impl_.codec_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .message.AudioHead.Codec codec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_codec(static_cast<::message::AudioHead_Codec>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AudioHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_next_size(), target);
  }

  // optional .message.AudioHead.Codec codec = 2;
  if (_internal_has_codec()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_codec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AudioHead)
  return target;
}

size_t AudioHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.AudioHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_size());
  }

  // optional .message.AudioHead.Codec codec = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_codec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioHead::GetClassData() const { return &_class_data_; }


void AudioHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioHead*>(&to_msg);
  auto& from = static_cast<const AudioHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.AudioHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_size() != 0) {
    _this->_internal_set_next_size(from._internal_next_size());
  }
  if (from._internal_has_codec()) {
    _this->_internal_set_codec(from._internal_codec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioHead::CopyFrom(const AudioHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.AudioHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioHead::IsInitialized() const {
  return true;
}

void AudioHead::InternalSwap(AudioHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioHead, _impl_.codec_)
      + sizeof(AudioHead::_impl_.codec_)
      - PROTOBUF_FIELD_OFFSET(AudioHead, _impl_.next_size_)>(
          reinterpret_cast<char*>(&_impl_.next_size_),
          reinterpret_cast<char*>(&other->_impl_.next_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class VideoHead::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoHead>()._impl_._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VideoHead::VideoHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.VideoHead)
}
VideoHead::VideoHead(const VideoHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_size_){}
    , decltype(_impl_.partial_){}
    , decltype(_impl_.codec_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.dts_){}
    , decltype(_impl_.pts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_size_, &from._impl_.next_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pts_) -
    reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.pts_));
  // @@protoc_insertion_point(copy_constructor:message.VideoHead)
}

inline void VideoHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_size_){uint64_t{0u}}
    , decltype(_impl_.partial_){false}
    , decltype(_impl_.codec_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.dts_){uint64_t{0u}}
    , decltype(_impl_.pts_){uint64_t{0u}}
  };
}

VideoHead::~VideoHead() {
  // @@protoc_insertion_point(destructor:message.VideoHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoHead::Clear() {
// @@protoc_insertion_point(message_clear_start:message.VideoHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.next_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partial_) -
      reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.partial_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.codec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pts_) -
        reinterpret_cast<char*>(&_impl_.codec_)) + sizeof(_impl_.pts_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool partial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.partial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .message.VideoHead.Codec codec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_codec(static_cast<::message::VideoHead_Codec>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .message.VideoHead.FrameType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::VideoHead_FrameType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 dts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_dts(&has_bits);
          _impl_.dts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 pts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pts(&has_bits);
          _impl_.pts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.VideoHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_next_size(), target);
  }

  // bool partial = 2;
  if (this->_internal_partial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_partial(), target);
  }

  // optional .message.VideoHead.Codec codec = 3;
  if (_internal_has_codec()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_codec(), target);
  }

  // optional .message.VideoHead.FrameType type = 4;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional uint32 sequence = 5;
  if (_internal_has_sequence()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sequence(), target);
  }

  // optional uint32 width = 6;
  if (_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // optional uint32 height = 7;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_height(), target);
  }

  // optional uint64 dts = 8;
  if (_internal_has_dts()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_dts(), target);
  }

  // optional uint64 pts = 9;
  if (_internal_has_pts()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_pts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.VideoHead)
  return target;
}

size_t VideoHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.VideoHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_size());
  }

  // bool partial = 2;
  if (this->_internal_partial() != 0) {
    total_size += 1 + 1;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .message.VideoHead.Codec codec = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_codec());
    }

    // optional .message.VideoHead.FrameType type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 sequence = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 width = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint64 dts = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dts());
    }

    // optional uint64 pts = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pts());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoHead::GetClassData() const { return &_class_data_; }


void VideoHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoHead*>(&to_msg);
  auto& from = static_cast<const VideoHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.VideoHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_size() != 0) {
    _this->_internal_set_next_size(from._internal_next_size());
  }
  if (from._internal_partial() != 0) {
    _this->_internal_set_partial(from._internal_partial());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.codec_ = from._impl_.codec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dts_ = from._impl_.dts_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pts_ = from._impl_.pts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoHead::CopyFrom(const VideoHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.VideoHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoHead::IsInitialized() const {
  return true;
}

void VideoHead::InternalSwap(VideoHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoHead, _impl_.pts_)
      + sizeof(VideoHead::_impl_.pts_)
      - PROTOBUF_FIELD_OFFSET(VideoHead, _impl_.next_size_)>(
          reinterpret_cast<char*>(&_impl_.next_size_),
          reinterpret_cast<char*>(&other->_impl_.next_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class EventHead::_Internal {
 public:
};

EventHead::EventHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.EventHead)
}
EventHead::EventHead(const EventHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_size_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_size_, &from._impl_.next_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:message.EventHead)
}

inline void EventHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_size_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventHead::~EventHead() {
  // @@protoc_insertion_point(destructor:message.EventHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventHead::Clear() {
// @@protoc_insertion_point(message_clear_start:message.EventHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.next_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.next_size_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.EventHead.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::EventHead_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.EventHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_next_size(), target);
  }

  // .message.EventHead.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.EventHead)
  return target;
}

size_t EventHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.EventHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 next_size = 1;
  if (this->_internal_next_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_size());
  }

  // .message.EventHead.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventHead::GetClassData() const { return &_class_data_; }


void EventHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventHead*>(&to_msg);
  auto& from = static_cast<const EventHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.EventHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_size() != 0) {
    _this->_internal_set_next_size(from._internal_next_size());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventHead::CopyFrom(const EventHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.EventHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventHead::IsInitialized() const {
  return true;
}

void EventHead::InternalSwap(EventHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventHead, _impl_.type_)
      + sizeof(EventHead::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(EventHead, _impl_.next_size_)>(
          reinterpret_cast<char*>(&_impl_.next_size_),
          reinterpret_cast<char*>(&other->_impl_.next_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::CommonHead*
Arena::CreateMaybeMessage< ::message::CommonHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::CommonHead >(arena);
}
template<> PROTOBUF_NOINLINE ::message::AudioHead*
Arena::CreateMaybeMessage< ::message::AudioHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::AudioHead >(arena);
}
template<> PROTOBUF_NOINLINE ::message::VideoHead*
Arena::CreateMaybeMessage< ::message::VideoHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::VideoHead >(arena);
}
template<> PROTOBUF_NOINLINE ::message::EventHead*
Arena::CreateMaybeMessage< ::message::EventHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::EventHead >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
