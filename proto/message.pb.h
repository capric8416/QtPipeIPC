// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AudioHead;
struct AudioHeadDefaultTypeInternal;
extern AudioHeadDefaultTypeInternal _AudioHead_default_instance_;
class CommonHead;
struct CommonHeadDefaultTypeInternal;
extern CommonHeadDefaultTypeInternal _CommonHead_default_instance_;
class EventHead;
struct EventHeadDefaultTypeInternal;
extern EventHeadDefaultTypeInternal _EventHead_default_instance_;
class VideoHead;
struct VideoHeadDefaultTypeInternal;
extern VideoHeadDefaultTypeInternal _VideoHead_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AudioHead* Arena::CreateMaybeMessage<::message::AudioHead>(Arena*);
template<> ::message::CommonHead* Arena::CreateMaybeMessage<::message::CommonHead>(Arena*);
template<> ::message::EventHead* Arena::CreateMaybeMessage<::message::EventHead>(Arena*);
template<> ::message::VideoHead* Arena::CreateMaybeMessage<::message::VideoHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

enum CommonHead_Type : int {
  CommonHead_Type_NoMansLand = 0,
  CommonHead_Type_Audio = 1,
  CommonHead_Type_Video = 2,
  CommonHead_Type_Event = 3,
  CommonHead_Type_CommonHead_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommonHead_Type_CommonHead_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommonHead_Type_IsValid(int value);
constexpr CommonHead_Type CommonHead_Type_Type_MIN = CommonHead_Type_NoMansLand;
constexpr CommonHead_Type CommonHead_Type_Type_MAX = CommonHead_Type_Event;
constexpr int CommonHead_Type_Type_ARRAYSIZE = CommonHead_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonHead_Type_descriptor();
template<typename T>
inline const std::string& CommonHead_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonHead_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonHead_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonHead_Type_descriptor(), enum_t_value);
}
inline bool CommonHead_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonHead_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonHead_Type>(
    CommonHead_Type_descriptor(), name, value);
}
enum AudioHead_Codec : int {
  AudioHead_Codec_NoMansLand = 0,
  AudioHead_Codec_G723_1 = 1,
  AudioHead_Codec_AudioHead_Codec_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AudioHead_Codec_AudioHead_Codec_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AudioHead_Codec_IsValid(int value);
constexpr AudioHead_Codec AudioHead_Codec_Codec_MIN = AudioHead_Codec_NoMansLand;
constexpr AudioHead_Codec AudioHead_Codec_Codec_MAX = AudioHead_Codec_G723_1;
constexpr int AudioHead_Codec_Codec_ARRAYSIZE = AudioHead_Codec_Codec_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioHead_Codec_descriptor();
template<typename T>
inline const std::string& AudioHead_Codec_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioHead_Codec>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioHead_Codec_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioHead_Codec_descriptor(), enum_t_value);
}
inline bool AudioHead_Codec_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioHead_Codec* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioHead_Codec>(
    AudioHead_Codec_descriptor(), name, value);
}
enum VideoHead_FrameType : int {
  VideoHead_FrameType_NoMansLand = 0,
  VideoHead_FrameType_IntraCoded = 1,
  VideoHead_FrameType_Predicated = 2,
  VideoHead_FrameType_BiDirectional = 3,
  VideoHead_FrameType_VideoHead_FrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VideoHead_FrameType_VideoHead_FrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VideoHead_FrameType_IsValid(int value);
constexpr VideoHead_FrameType VideoHead_FrameType_FrameType_MIN = VideoHead_FrameType_NoMansLand;
constexpr VideoHead_FrameType VideoHead_FrameType_FrameType_MAX = VideoHead_FrameType_BiDirectional;
constexpr int VideoHead_FrameType_FrameType_ARRAYSIZE = VideoHead_FrameType_FrameType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoHead_FrameType_descriptor();
template<typename T>
inline const std::string& VideoHead_FrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoHead_FrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoHead_FrameType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoHead_FrameType_descriptor(), enum_t_value);
}
inline bool VideoHead_FrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoHead_FrameType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoHead_FrameType>(
    VideoHead_FrameType_descriptor(), name, value);
}
enum VideoHead_Codec : int {
  VideoHead_Codec_NoMansLand1 = 0,
  VideoHead_Codec_AVC = 1,
  VideoHead_Codec_HEVC = 2,
  VideoHead_Codec_VideoHead_Codec_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VideoHead_Codec_VideoHead_Codec_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VideoHead_Codec_IsValid(int value);
constexpr VideoHead_Codec VideoHead_Codec_Codec_MIN = VideoHead_Codec_NoMansLand1;
constexpr VideoHead_Codec VideoHead_Codec_Codec_MAX = VideoHead_Codec_HEVC;
constexpr int VideoHead_Codec_Codec_ARRAYSIZE = VideoHead_Codec_Codec_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoHead_Codec_descriptor();
template<typename T>
inline const std::string& VideoHead_Codec_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoHead_Codec>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoHead_Codec_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoHead_Codec_descriptor(), enum_t_value);
}
inline bool VideoHead_Codec_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoHead_Codec* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoHead_Codec>(
    VideoHead_Codec_descriptor(), name, value);
}
enum EventHead_Type : int {
  EventHead_Type_NoMansLand = 0,
  EventHead_Type_Close = 1,
  EventHead_Type_SetBrightnessFilter = 2,
  EventHead_Type_SetContrastFilter = 3,
  EventHead_Type_SetSaturationFilter = 4,
  EventHead_Type_SetGammaFilter = 5,
  EventHead_Type_SetSpeed = 6,
  EventHead_Type_TakeSnapshot = 7,
  EventHead_Type_Pause = 8,
  EventHead_Type_Resume = 9,
  EventHead_Type_StepForward = 10,
  EventHead_Type_StepBackward = 11,
  EventHead_Type_StartRecordStream = 12,
  EventHead_Type_StopRecordStream = 13,
  EventHead_Type_EventHead_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventHead_Type_EventHead_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventHead_Type_IsValid(int value);
constexpr EventHead_Type EventHead_Type_Type_MIN = EventHead_Type_NoMansLand;
constexpr EventHead_Type EventHead_Type_Type_MAX = EventHead_Type_StopRecordStream;
constexpr int EventHead_Type_Type_ARRAYSIZE = EventHead_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventHead_Type_descriptor();
template<typename T>
inline const std::string& EventHead_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventHead_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventHead_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventHead_Type_descriptor(), enum_t_value);
}
inline bool EventHead_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventHead_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventHead_Type>(
    EventHead_Type_descriptor(), name, value);
}
// ===================================================================

class CommonHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.CommonHead) */ {
 public:
  inline CommonHead() : CommonHead(nullptr) {}
  ~CommonHead() override;
  explicit PROTOBUF_CONSTEXPR CommonHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonHead(const CommonHead& from);
  CommonHead(CommonHead&& from) noexcept
    : CommonHead() {
    *this = ::std::move(from);
  }

  inline CommonHead& operator=(const CommonHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonHead& operator=(CommonHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonHead* internal_default_instance() {
    return reinterpret_cast<const CommonHead*>(
               &_CommonHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonHead& a, CommonHead& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonHead& from) {
    CommonHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.CommonHead";
  }
  protected:
  explicit CommonHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonHead_Type Type;
  static constexpr Type NoMansLand =
    CommonHead_Type_NoMansLand;
  static constexpr Type Audio =
    CommonHead_Type_Audio;
  static constexpr Type Video =
    CommonHead_Type_Video;
  static constexpr Type Event =
    CommonHead_Type_Event;
  static inline bool Type_IsValid(int value) {
    return CommonHead_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CommonHead_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CommonHead_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CommonHead_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CommonHead_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CommonHead_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CommonHead_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextSizeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kExtendFieldNumber = 3,
  };
  // uint64 next_size = 1;
  void clear_next_size();
  uint64_t next_size() const;
  void set_next_size(uint64_t value);
  private:
  uint64_t _internal_next_size() const;
  void _internal_set_next_size(uint64_t value);
  public:

  // .message.CommonHead.Type type = 2;
  void clear_type();
  ::message::CommonHead_Type type() const;
  void set_type(::message::CommonHead_Type value);
  private:
  ::message::CommonHead_Type _internal_type() const;
  void _internal_set_type(::message::CommonHead_Type value);
  public:

  // bool extend = 3;
  void clear_extend();
  bool extend() const;
  void set_extend(bool value);
  private:
  bool _internal_extend() const;
  void _internal_set_extend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.CommonHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t next_size_;
    int type_;
    bool extend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AudioHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AudioHead) */ {
 public:
  inline AudioHead() : AudioHead(nullptr) {}
  ~AudioHead() override;
  explicit PROTOBUF_CONSTEXPR AudioHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioHead(const AudioHead& from);
  AudioHead(AudioHead&& from) noexcept
    : AudioHead() {
    *this = ::std::move(from);
  }

  inline AudioHead& operator=(const AudioHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioHead& operator=(AudioHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioHead* internal_default_instance() {
    return reinterpret_cast<const AudioHead*>(
               &_AudioHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioHead& a, AudioHead& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AudioHead& from) {
    AudioHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AudioHead";
  }
  protected:
  explicit AudioHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioHead_Codec Codec;
  static constexpr Codec NoMansLand =
    AudioHead_Codec_NoMansLand;
  static constexpr Codec G723_1 =
    AudioHead_Codec_G723_1;
  static inline bool Codec_IsValid(int value) {
    return AudioHead_Codec_IsValid(value);
  }
  static constexpr Codec Codec_MIN =
    AudioHead_Codec_Codec_MIN;
  static constexpr Codec Codec_MAX =
    AudioHead_Codec_Codec_MAX;
  static constexpr int Codec_ARRAYSIZE =
    AudioHead_Codec_Codec_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Codec_descriptor() {
    return AudioHead_Codec_descriptor();
  }
  template<typename T>
  static inline const std::string& Codec_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Codec>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Codec_Name.");
    return AudioHead_Codec_Name(enum_t_value);
  }
  static inline bool Codec_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Codec* value) {
    return AudioHead_Codec_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextSizeFieldNumber = 1,
    kCodecFieldNumber = 2,
  };
  // uint64 next_size = 1;
  void clear_next_size();
  uint64_t next_size() const;
  void set_next_size(uint64_t value);
  private:
  uint64_t _internal_next_size() const;
  void _internal_set_next_size(uint64_t value);
  public:

  // optional .message.AudioHead.Codec codec = 2;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  ::message::AudioHead_Codec codec() const;
  void set_codec(::message::AudioHead_Codec value);
  private:
  ::message::AudioHead_Codec _internal_codec() const;
  void _internal_set_codec(::message::AudioHead_Codec value);
  public:

  // @@protoc_insertion_point(class_scope:message.AudioHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t next_size_;
    int codec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VideoHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.VideoHead) */ {
 public:
  inline VideoHead() : VideoHead(nullptr) {}
  ~VideoHead() override;
  explicit PROTOBUF_CONSTEXPR VideoHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoHead(const VideoHead& from);
  VideoHead(VideoHead&& from) noexcept
    : VideoHead() {
    *this = ::std::move(from);
  }

  inline VideoHead& operator=(const VideoHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoHead& operator=(VideoHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoHead* internal_default_instance() {
    return reinterpret_cast<const VideoHead*>(
               &_VideoHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoHead& a, VideoHead& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoHead& from) {
    VideoHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.VideoHead";
  }
  protected:
  explicit VideoHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VideoHead_FrameType FrameType;
  static constexpr FrameType NoMansLand =
    VideoHead_FrameType_NoMansLand;
  static constexpr FrameType IntraCoded =
    VideoHead_FrameType_IntraCoded;
  static constexpr FrameType Predicated =
    VideoHead_FrameType_Predicated;
  static constexpr FrameType BiDirectional =
    VideoHead_FrameType_BiDirectional;
  static inline bool FrameType_IsValid(int value) {
    return VideoHead_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN =
    VideoHead_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX =
    VideoHead_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE =
    VideoHead_FrameType_FrameType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameType_descriptor() {
    return VideoHead_FrameType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameType_Name.");
    return VideoHead_FrameType_Name(enum_t_value);
  }
  static inline bool FrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameType* value) {
    return VideoHead_FrameType_Parse(name, value);
  }

  typedef VideoHead_Codec Codec;
  static constexpr Codec NoMansLand1 =
    VideoHead_Codec_NoMansLand1;
  static constexpr Codec AVC =
    VideoHead_Codec_AVC;
  static constexpr Codec HEVC =
    VideoHead_Codec_HEVC;
  static inline bool Codec_IsValid(int value) {
    return VideoHead_Codec_IsValid(value);
  }
  static constexpr Codec Codec_MIN =
    VideoHead_Codec_Codec_MIN;
  static constexpr Codec Codec_MAX =
    VideoHead_Codec_Codec_MAX;
  static constexpr int Codec_ARRAYSIZE =
    VideoHead_Codec_Codec_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Codec_descriptor() {
    return VideoHead_Codec_descriptor();
  }
  template<typename T>
  static inline const std::string& Codec_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Codec>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Codec_Name.");
    return VideoHead_Codec_Name(enum_t_value);
  }
  static inline bool Codec_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Codec* value) {
    return VideoHead_Codec_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextSizeFieldNumber = 1,
    kPartialFieldNumber = 2,
    kCodecFieldNumber = 3,
    kTypeFieldNumber = 4,
    kSequenceFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kDtsFieldNumber = 8,
    kPtsFieldNumber = 9,
  };
  // uint64 next_size = 1;
  void clear_next_size();
  uint64_t next_size() const;
  void set_next_size(uint64_t value);
  private:
  uint64_t _internal_next_size() const;
  void _internal_set_next_size(uint64_t value);
  public:

  // bool partial = 2;
  void clear_partial();
  bool partial() const;
  void set_partial(bool value);
  private:
  bool _internal_partial() const;
  void _internal_set_partial(bool value);
  public:

  // optional .message.VideoHead.Codec codec = 3;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  ::message::VideoHead_Codec codec() const;
  void set_codec(::message::VideoHead_Codec value);
  private:
  ::message::VideoHead_Codec _internal_codec() const;
  void _internal_set_codec(::message::VideoHead_Codec value);
  public:

  // optional .message.VideoHead.FrameType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::message::VideoHead_FrameType type() const;
  void set_type(::message::VideoHead_FrameType value);
  private:
  ::message::VideoHead_FrameType _internal_type() const;
  void _internal_set_type(::message::VideoHead_FrameType value);
  public:

  // optional uint32 sequence = 5;
  bool has_sequence() const;
  private:
  bool _internal_has_sequence() const;
  public:
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // optional uint32 width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint64 dts = 8;
  bool has_dts() const;
  private:
  bool _internal_has_dts() const;
  public:
  void clear_dts();
  uint64_t dts() const;
  void set_dts(uint64_t value);
  private:
  uint64_t _internal_dts() const;
  void _internal_set_dts(uint64_t value);
  public:

  // optional uint64 pts = 9;
  bool has_pts() const;
  private:
  bool _internal_has_pts() const;
  public:
  void clear_pts();
  uint64_t pts() const;
  void set_pts(uint64_t value);
  private:
  uint64_t _internal_pts() const;
  void _internal_set_pts(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.VideoHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t next_size_;
    bool partial_;
    int codec_;
    int type_;
    uint32_t sequence_;
    uint32_t width_;
    uint32_t height_;
    uint64_t dts_;
    uint64_t pts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class EventHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.EventHead) */ {
 public:
  inline EventHead() : EventHead(nullptr) {}
  ~EventHead() override;
  explicit PROTOBUF_CONSTEXPR EventHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventHead(const EventHead& from);
  EventHead(EventHead&& from) noexcept
    : EventHead() {
    *this = ::std::move(from);
  }

  inline EventHead& operator=(const EventHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventHead& operator=(EventHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventHead* internal_default_instance() {
    return reinterpret_cast<const EventHead*>(
               &_EventHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventHead& a, EventHead& b) {
    a.Swap(&b);
  }
  inline void Swap(EventHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventHead& from) {
    EventHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.EventHead";
  }
  protected:
  explicit EventHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventHead_Type Type;
  static constexpr Type NoMansLand =
    EventHead_Type_NoMansLand;
  static constexpr Type Close =
    EventHead_Type_Close;
  static constexpr Type SetBrightnessFilter =
    EventHead_Type_SetBrightnessFilter;
  static constexpr Type SetContrastFilter =
    EventHead_Type_SetContrastFilter;
  static constexpr Type SetSaturationFilter =
    EventHead_Type_SetSaturationFilter;
  static constexpr Type SetGammaFilter =
    EventHead_Type_SetGammaFilter;
  static constexpr Type SetSpeed =
    EventHead_Type_SetSpeed;
  static constexpr Type TakeSnapshot =
    EventHead_Type_TakeSnapshot;
  static constexpr Type Pause =
    EventHead_Type_Pause;
  static constexpr Type Resume =
    EventHead_Type_Resume;
  static constexpr Type StepForward =
    EventHead_Type_StepForward;
  static constexpr Type StepBackward =
    EventHead_Type_StepBackward;
  static constexpr Type StartRecordStream =
    EventHead_Type_StartRecordStream;
  static constexpr Type StopRecordStream =
    EventHead_Type_StopRecordStream;
  static inline bool Type_IsValid(int value) {
    return EventHead_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EventHead_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EventHead_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EventHead_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EventHead_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EventHead_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return EventHead_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextSizeFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // uint64 next_size = 1;
  void clear_next_size();
  uint64_t next_size() const;
  void set_next_size(uint64_t value);
  private:
  uint64_t _internal_next_size() const;
  void _internal_set_next_size(uint64_t value);
  public:

  // .message.EventHead.Type type = 2;
  void clear_type();
  ::message::EventHead_Type type() const;
  void set_type(::message::EventHead_Type value);
  private:
  ::message::EventHead_Type _internal_type() const;
  void _internal_set_type(::message::EventHead_Type value);
  public:

  // @@protoc_insertion_point(class_scope:message.EventHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t next_size_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonHead

// uint64 next_size = 1;
inline void CommonHead::clear_next_size() {
  _impl_.next_size_ = uint64_t{0u};
}
inline uint64_t CommonHead::_internal_next_size() const {
  return _impl_.next_size_;
}
inline uint64_t CommonHead::next_size() const {
  // @@protoc_insertion_point(field_get:message.CommonHead.next_size)
  return _internal_next_size();
}
inline void CommonHead::_internal_set_next_size(uint64_t value) {
  
  _impl_.next_size_ = value;
}
inline void CommonHead::set_next_size(uint64_t value) {
  _internal_set_next_size(value);
  // @@protoc_insertion_point(field_set:message.CommonHead.next_size)
}

// .message.CommonHead.Type type = 2;
inline void CommonHead::clear_type() {
  _impl_.type_ = 0;
}
inline ::message::CommonHead_Type CommonHead::_internal_type() const {
  return static_cast< ::message::CommonHead_Type >(_impl_.type_);
}
inline ::message::CommonHead_Type CommonHead::type() const {
  // @@protoc_insertion_point(field_get:message.CommonHead.type)
  return _internal_type();
}
inline void CommonHead::_internal_set_type(::message::CommonHead_Type value) {
  
  _impl_.type_ = value;
}
inline void CommonHead::set_type(::message::CommonHead_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.CommonHead.type)
}

// bool extend = 3;
inline void CommonHead::clear_extend() {
  _impl_.extend_ = false;
}
inline bool CommonHead::_internal_extend() const {
  return _impl_.extend_;
}
inline bool CommonHead::extend() const {
  // @@protoc_insertion_point(field_get:message.CommonHead.extend)
  return _internal_extend();
}
inline void CommonHead::_internal_set_extend(bool value) {
  
  _impl_.extend_ = value;
}
inline void CommonHead::set_extend(bool value) {
  _internal_set_extend(value);
  // @@protoc_insertion_point(field_set:message.CommonHead.extend)
}

// -------------------------------------------------------------------

// AudioHead

// uint64 next_size = 1;
inline void AudioHead::clear_next_size() {
  _impl_.next_size_ = uint64_t{0u};
}
inline uint64_t AudioHead::_internal_next_size() const {
  return _impl_.next_size_;
}
inline uint64_t AudioHead::next_size() const {
  // @@protoc_insertion_point(field_get:message.AudioHead.next_size)
  return _internal_next_size();
}
inline void AudioHead::_internal_set_next_size(uint64_t value) {
  
  _impl_.next_size_ = value;
}
inline void AudioHead::set_next_size(uint64_t value) {
  _internal_set_next_size(value);
  // @@protoc_insertion_point(field_set:message.AudioHead.next_size)
}

// optional .message.AudioHead.Codec codec = 2;
inline bool AudioHead::_internal_has_codec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AudioHead::has_codec() const {
  return _internal_has_codec();
}
inline void AudioHead::clear_codec() {
  _impl_.codec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::message::AudioHead_Codec AudioHead::_internal_codec() const {
  return static_cast< ::message::AudioHead_Codec >(_impl_.codec_);
}
inline ::message::AudioHead_Codec AudioHead::codec() const {
  // @@protoc_insertion_point(field_get:message.AudioHead.codec)
  return _internal_codec();
}
inline void AudioHead::_internal_set_codec(::message::AudioHead_Codec value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.codec_ = value;
}
inline void AudioHead::set_codec(::message::AudioHead_Codec value) {
  _internal_set_codec(value);
  // @@protoc_insertion_point(field_set:message.AudioHead.codec)
}

// -------------------------------------------------------------------

// VideoHead

// uint64 next_size = 1;
inline void VideoHead::clear_next_size() {
  _impl_.next_size_ = uint64_t{0u};
}
inline uint64_t VideoHead::_internal_next_size() const {
  return _impl_.next_size_;
}
inline uint64_t VideoHead::next_size() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.next_size)
  return _internal_next_size();
}
inline void VideoHead::_internal_set_next_size(uint64_t value) {
  
  _impl_.next_size_ = value;
}
inline void VideoHead::set_next_size(uint64_t value) {
  _internal_set_next_size(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.next_size)
}

// bool partial = 2;
inline void VideoHead::clear_partial() {
  _impl_.partial_ = false;
}
inline bool VideoHead::_internal_partial() const {
  return _impl_.partial_;
}
inline bool VideoHead::partial() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.partial)
  return _internal_partial();
}
inline void VideoHead::_internal_set_partial(bool value) {
  
  _impl_.partial_ = value;
}
inline void VideoHead::set_partial(bool value) {
  _internal_set_partial(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.partial)
}

// optional .message.VideoHead.Codec codec = 3;
inline bool VideoHead::_internal_has_codec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoHead::has_codec() const {
  return _internal_has_codec();
}
inline void VideoHead::clear_codec() {
  _impl_.codec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::message::VideoHead_Codec VideoHead::_internal_codec() const {
  return static_cast< ::message::VideoHead_Codec >(_impl_.codec_);
}
inline ::message::VideoHead_Codec VideoHead::codec() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.codec)
  return _internal_codec();
}
inline void VideoHead::_internal_set_codec(::message::VideoHead_Codec value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.codec_ = value;
}
inline void VideoHead::set_codec(::message::VideoHead_Codec value) {
  _internal_set_codec(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.codec)
}

// optional .message.VideoHead.FrameType type = 4;
inline bool VideoHead::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoHead::has_type() const {
  return _internal_has_type();
}
inline void VideoHead::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::message::VideoHead_FrameType VideoHead::_internal_type() const {
  return static_cast< ::message::VideoHead_FrameType >(_impl_.type_);
}
inline ::message::VideoHead_FrameType VideoHead::type() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.type)
  return _internal_type();
}
inline void VideoHead::_internal_set_type(::message::VideoHead_FrameType value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void VideoHead::set_type(::message::VideoHead_FrameType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.type)
}

// optional uint32 sequence = 5;
inline bool VideoHead::_internal_has_sequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VideoHead::has_sequence() const {
  return _internal_has_sequence();
}
inline void VideoHead::clear_sequence() {
  _impl_.sequence_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t VideoHead::_internal_sequence() const {
  return _impl_.sequence_;
}
inline uint32_t VideoHead::sequence() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.sequence)
  return _internal_sequence();
}
inline void VideoHead::_internal_set_sequence(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_ = value;
}
inline void VideoHead::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.sequence)
}

// optional uint32 width = 6;
inline bool VideoHead::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VideoHead::has_width() const {
  return _internal_has_width();
}
inline void VideoHead::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t VideoHead::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t VideoHead::width() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.width)
  return _internal_width();
}
inline void VideoHead::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}
inline void VideoHead::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.width)
}

// optional uint32 height = 7;
inline bool VideoHead::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VideoHead::has_height() const {
  return _internal_has_height();
}
inline void VideoHead::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t VideoHead::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t VideoHead::height() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.height)
  return _internal_height();
}
inline void VideoHead::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.height_ = value;
}
inline void VideoHead::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.height)
}

// optional uint64 dts = 8;
inline bool VideoHead::_internal_has_dts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VideoHead::has_dts() const {
  return _internal_has_dts();
}
inline void VideoHead::clear_dts() {
  _impl_.dts_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t VideoHead::_internal_dts() const {
  return _impl_.dts_;
}
inline uint64_t VideoHead::dts() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.dts)
  return _internal_dts();
}
inline void VideoHead::_internal_set_dts(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dts_ = value;
}
inline void VideoHead::set_dts(uint64_t value) {
  _internal_set_dts(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.dts)
}

// optional uint64 pts = 9;
inline bool VideoHead::_internal_has_pts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VideoHead::has_pts() const {
  return _internal_has_pts();
}
inline void VideoHead::clear_pts() {
  _impl_.pts_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t VideoHead::_internal_pts() const {
  return _impl_.pts_;
}
inline uint64_t VideoHead::pts() const {
  // @@protoc_insertion_point(field_get:message.VideoHead.pts)
  return _internal_pts();
}
inline void VideoHead::_internal_set_pts(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pts_ = value;
}
inline void VideoHead::set_pts(uint64_t value) {
  _internal_set_pts(value);
  // @@protoc_insertion_point(field_set:message.VideoHead.pts)
}

// -------------------------------------------------------------------

// EventHead

// uint64 next_size = 1;
inline void EventHead::clear_next_size() {
  _impl_.next_size_ = uint64_t{0u};
}
inline uint64_t EventHead::_internal_next_size() const {
  return _impl_.next_size_;
}
inline uint64_t EventHead::next_size() const {
  // @@protoc_insertion_point(field_get:message.EventHead.next_size)
  return _internal_next_size();
}
inline void EventHead::_internal_set_next_size(uint64_t value) {
  
  _impl_.next_size_ = value;
}
inline void EventHead::set_next_size(uint64_t value) {
  _internal_set_next_size(value);
  // @@protoc_insertion_point(field_set:message.EventHead.next_size)
}

// .message.EventHead.Type type = 2;
inline void EventHead::clear_type() {
  _impl_.type_ = 0;
}
inline ::message::EventHead_Type EventHead::_internal_type() const {
  return static_cast< ::message::EventHead_Type >(_impl_.type_);
}
inline ::message::EventHead_Type EventHead::type() const {
  // @@protoc_insertion_point(field_get:message.EventHead.type)
  return _internal_type();
}
inline void EventHead::_internal_set_type(::message::EventHead_Type value) {
  
  _impl_.type_ = value;
}
inline void EventHead::set_type(::message::EventHead_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.EventHead.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message::CommonHead_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::CommonHead_Type>() {
  return ::message::CommonHead_Type_descriptor();
}
template <> struct is_proto_enum< ::message::AudioHead_Codec> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::AudioHead_Codec>() {
  return ::message::AudioHead_Codec_descriptor();
}
template <> struct is_proto_enum< ::message::VideoHead_FrameType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::VideoHead_FrameType>() {
  return ::message::VideoHead_FrameType_descriptor();
}
template <> struct is_proto_enum< ::message::VideoHead_Codec> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::VideoHead_Codec>() {
  return ::message::VideoHead_Codec_descriptor();
}
template <> struct is_proto_enum< ::message::EventHead_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EventHead_Type>() {
  return ::message::EventHead_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
